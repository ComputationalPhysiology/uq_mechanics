# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _cpp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cpp', [dirname(__file__)])
        except ImportError:
            import _cpp
            return _cpp
        if fp is not None:
            try:
                _mod = imp.load_module('_cpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cpp = swig_import_helper()
    del swig_import_helper
else:
    import _cpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cpp.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_cpp.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_cpp.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_cpp.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_cpp.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_cpp.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_cpp.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_cpp.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_cpp.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_cpp.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_cpp.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_cpp.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_cpp.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_cpp.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_cpp.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_cpp.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_cpp.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _cpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def fiberrules_swigversion():
  return _cpp.fiberrules_swigversion()
fiberrules_swigversion = _cpp.fiberrules_swigversion

def fiberrules_version():
  return _cpp.fiberrules_version()
fiberrules_version = _cpp.fiberrules_version
tmp = hex(fiberrules_swigversion())
__swigversion__ = "%d.%d.%d"%(tuple(map(int, [tmp[-5], tmp[-3], tmp[-2:]])))
__fiberrulesversion__ = fiberrules_version()
del tmp, fiberrules_swigversion, fiberrules_version

M_PI = _cpp.M_PI
class Quaternion(object):
    """Proxy of C++ Quaternion class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    s = _swig_property(_cpp.Quaternion_s_get, _cpp.Quaternion_s_set)
    i = _swig_property(_cpp.Quaternion_i_get, _cpp.Quaternion_i_set)
    j = _swig_property(_cpp.Quaternion_j_get, _cpp.Quaternion_j_set)
    k = _swig_property(_cpp.Quaternion_k_get, _cpp.Quaternion_k_set)
    def __init__(self): 
        """__init__(Quaternion self) -> Quaternion"""
        _cpp.Quaternion_swiginit(self,_cpp.new_Quaternion())
    __swig_destroy__ = _cpp.delete_Quaternion
Quaternion_swigregister = _cpp.Quaternion_swigregister
Quaternion_swigregister(Quaternion)

class Element(object):
    """Proxy of C++ Element class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_cpp.Element_type_get, _cpp.Element_type_set)
    region = _swig_property(_cpp.Element_region_get, _cpp.Element_region_set)
    def __getitem__(self, *args):
        """__getitem__(Element self, uint index) -> uint"""
        return _cpp.Element___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(Element self, uint index, double value)"""
        return _cpp.Element___setitem__(self, *args)

    def set_indices(self, *args):
        """set_indices(Element self, PyObject * indices) -> PyObject *"""
        return _cpp.Element_set_indices(self, *args)

    def __init__(self): 
        """__init__(Element self) -> Element"""
        _cpp.Element_swiginit(self,_cpp.new_Element())
    __swig_destroy__ = _cpp.delete_Element
Element.__getitem__ = new_instancemethod(_cpp.Element___getitem__,None,Element)
Element.__setitem__ = new_instancemethod(_cpp.Element___setitem__,None,Element)
Element.set_indices = new_instancemethod(_cpp.Element_set_indices,None,Element)
Element_swigregister = _cpp.Element_swigregister
Element_swigregister(Element)

class FiberRulesData(object):
    """Proxy of C++ FiberRulesData class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(FiberRulesData self, uint numScalarData_) -> FiberRulesData"""
        _cpp.FiberRulesData_swiginit(self,_cpp.new_FiberRulesData(*args))
    __swig_destroy__ = _cpp.delete_FiberRulesData
    numScalarData = _swig_property(_cpp.FiberRulesData_numScalarData_get, _cpp.FiberRulesData_numScalarData_set)
    lv_scalar = _swig_property(_cpp.FiberRulesData_lv_scalar_get, _cpp.FiberRulesData_lv_scalar_set)
    rv_scalar = _swig_property(_cpp.FiberRulesData_rv_scalar_get, _cpp.FiberRulesData_rv_scalar_set)
    epi_scalar = _swig_property(_cpp.FiberRulesData_epi_scalar_get, _cpp.FiberRulesData_epi_scalar_set)
    apex_gradient = _swig_property(_cpp.FiberRulesData_apex_gradient_get, _cpp.FiberRulesData_apex_gradient_set)
    lv_gradient = _swig_property(_cpp.FiberRulesData_lv_gradient_get, _cpp.FiberRulesData_lv_gradient_set)
    rv_gradient = _swig_property(_cpp.FiberRulesData_rv_gradient_get, _cpp.FiberRulesData_rv_gradient_set)
    epi_gradient = _swig_property(_cpp.FiberRulesData_epi_gradient_get, _cpp.FiberRulesData_epi_gradient_set)
    fiber_sheet_tensor = _swig_property(_cpp.FiberRulesData_fiber_sheet_tensor_get, _cpp.FiberRulesData_fiber_sheet_tensor_set)
    fiber_rotation_epi = _swig_property(_cpp.FiberRulesData_fiber_rotation_epi_get, _cpp.FiberRulesData_fiber_rotation_epi_set)
    fiber_rotation_endo = _swig_property(_cpp.FiberRulesData_fiber_rotation_endo_get, _cpp.FiberRulesData_fiber_rotation_endo_set)
    sheet_rotation_epi = _swig_property(_cpp.FiberRulesData_sheet_rotation_epi_get, _cpp.FiberRulesData_sheet_rotation_epi_set)
    sheet_rotation_endo = _swig_property(_cpp.FiberRulesData_sheet_rotation_endo_get, _cpp.FiberRulesData_sheet_rotation_endo_set)
    def __setitem__(self, name, value):
        setattr(self, name, value)

    def __getitem__(self, name):
        return getattr(self, name)

    def _lv_scalar_get(self):
        """_lv_scalar_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__lv_scalar_get(self)

    def _lv_scalar_set(self, value):
        import numpy as np
        np_array = self._lv_scalar_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    lv_scalar = property(_lv_scalar_get, _lv_scalar_set)

    def _rv_scalar_get(self):
        """_rv_scalar_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__rv_scalar_get(self)

    def _rv_scalar_set(self, value):
        import numpy as np
        np_array = self._rv_scalar_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    rv_scalar = property(_rv_scalar_get, _rv_scalar_set)

    def _epi_scalar_get(self):
        """_epi_scalar_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__epi_scalar_get(self)

    def _epi_scalar_set(self, value):
        import numpy as np
        np_array = self._epi_scalar_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    epi_scalar = property(_epi_scalar_get, _epi_scalar_set)

    def _apex_gradient_get(self):
        """_apex_gradient_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__apex_gradient_get(self)

    def _apex_gradient_set(self, value):
        import numpy as np
        np_array = self._apex_gradient_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    apex_gradient = property(_apex_gradient_get, _apex_gradient_set)

    def _lv_gradient_get(self):
        """_lv_gradient_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__lv_gradient_get(self)

    def _lv_gradient_set(self, value):
        import numpy as np
        np_array = self._lv_gradient_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    lv_gradient = property(_lv_gradient_get, _lv_gradient_set)

    def _rv_gradient_get(self):
        """_rv_gradient_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__rv_gradient_get(self)

    def _rv_gradient_set(self, value):
        import numpy as np
        np_array = self._rv_gradient_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    rv_gradient = property(_rv_gradient_get, _rv_gradient_set)

    def _epi_gradient_get(self):
        """_epi_gradient_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__epi_gradient_get(self)

    def _epi_gradient_set(self, value):
        import numpy as np
        np_array = self._epi_gradient_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    epi_gradient = property(_epi_gradient_get, _epi_gradient_set)

    def _fiber_sheet_tensor_get(self):
        """_fiber_sheet_tensor_get(FiberRulesData self) -> PyObject *"""
        return _cpp.FiberRulesData__fiber_sheet_tensor_get(self)

    def _fiber_sheet_tensor_set(self, value):
        import numpy as np
        np_array = self._fiber_sheet_tensor_get()
        if isinstance(value, np.ndarray):
            value = np.reshape(value, np_array.shape)
        np_array[:] = value

    fiber_sheet_tensor = property(_fiber_sheet_tensor_get, _fiber_sheet_tensor_set)

FiberRulesData._lv_scalar_get = new_instancemethod(_cpp.FiberRulesData__lv_scalar_get,None,FiberRulesData)
FiberRulesData._rv_scalar_get = new_instancemethod(_cpp.FiberRulesData__rv_scalar_get,None,FiberRulesData)
FiberRulesData._epi_scalar_get = new_instancemethod(_cpp.FiberRulesData__epi_scalar_get,None,FiberRulesData)
FiberRulesData._apex_gradient_get = new_instancemethod(_cpp.FiberRulesData__apex_gradient_get,None,FiberRulesData)
FiberRulesData._lv_gradient_get = new_instancemethod(_cpp.FiberRulesData__lv_gradient_get,None,FiberRulesData)
FiberRulesData._rv_gradient_get = new_instancemethod(_cpp.FiberRulesData__rv_gradient_get,None,FiberRulesData)
FiberRulesData._epi_gradient_get = new_instancemethod(_cpp.FiberRulesData__epi_gradient_get,None,FiberRulesData)
FiberRulesData._fiber_sheet_tensor_get = new_instancemethod(_cpp.FiberRulesData__fiber_sheet_tensor_get,None,FiberRulesData)
FiberRulesData_swigregister = _cpp.FiberRulesData_swigregister
FiberRulesData_swigregister(FiberRulesData)


def quaternionDot(*args):
  """quaternionDot(Quaternion a, Quaternion b) -> Real"""
  return _cpp.quaternionDot(*args)

def quaternionMult(*args):
  """quaternionMult(Quaternion a, Quaternion b) -> Quaternion"""
  return _cpp.quaternionMult(*args)

def bislerp(*args):
  """bislerp(Real const a_coeff, Quaternion a, Real const b_coeff, Quaternion b) -> Quaternion"""
  return _cpp.bislerp(*args)

def quaternionToRotation(*args):
  """quaternionToRotation(Quaternion q, Real [9] M)"""
  return _cpp.quaternionToRotation(*args)

def rotationToQuaternion(*args):
  """rotationToQuaternion(Real const [9] M) -> Quaternion"""
  return _cpp.rotationToQuaternion(*args)

def axisSystem(*args):
  """axisSystem(Real const [3] apex, Real const [3] surface_inward) -> Quaternion"""
  return _cpp.axisSystem(*args)

def rotateAxis(*args):
  """rotateAxis(Quaternion q, Real const alpha, Real const beta) -> Quaternion"""
  return _cpp.rotateAxis(*args)

def dataCentroid(*args):
  """dataCentroid(Element element, uint const numData, Real const * phi_data) -> Real"""
  return _cpp.dataCentroid(*args)

def computeCenterCoordinate(*args):
  """computeCenterCoordinate(Element this_element, uint const numPts, Real [3] center_coor)"""
  return _cpp.computeCenterCoordinate(*args)

def computeSingleFiberSheetSystem(*args):
  """
    computeSingleFiberSheetSystem(Real const lv_center, Real const rv_center, Real const epi_center, Real const [3] apex_gradient, 
        Real const [3] lv_gradient, Real const [3] rv_gradient, Real const [3] epi_gradient, 
        Real const alpha_epi_arg, Real const alpha_endo_arg, 
        Real const beta_epi_arg, Real const beta_endo_arg, Real [9] R, Real const noise, 
        Real const noise2)
    """
  return _cpp.computeSingleFiberSheetSystem(*args)

def computeFiberSheetSystem(*args):
  """computeFiberSheetSystem(FiberRulesData data, uint const numNoise, uint const numNoise2)"""
  return _cpp.computeFiberSheetSystem(*args)

def readPtsFile(*args):
  """readPtsFile(std::string const filename)"""
  return _cpp.readPtsFile(*args)

def _readElemFile(*args):
  """_readElemFile(std::string const filename, ElementVector elements)"""
  return _cpp._readElemFile(*args)

def readData(*args):
  """readData(std::string const filename, uint const numData, Real * data)"""
  return _cpp.readData(*args)
class ElementVector(object):
    """Proxy of C++ std::vector<(Element)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(ElementVector self) -> bool"""
        return _cpp.ElementVector___nonzero__(self)

    def __bool__(self):
        """__bool__(ElementVector self) -> bool"""
        return _cpp.ElementVector___bool__(self)

    def __len__(self):
        """__len__(ElementVector self) -> std::vector< Element >::size_type"""
        return _cpp.ElementVector___len__(self)

    def __getslice__(self, *args):
        """__getslice__(ElementVector self, std::vector< Element >::difference_type i, std::vector< Element >::difference_type j) -> ElementVector"""
        return _cpp.ElementVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(ElementVector self, std::vector< Element >::difference_type i, std::vector< Element >::difference_type j, 
            ElementVector v=std::vector< Element,std::allocator< Element > >())
        __setslice__(ElementVector self, std::vector< Element >::difference_type i, std::vector< Element >::difference_type j)
        """
        return _cpp.ElementVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(ElementVector self, std::vector< Element >::difference_type i, std::vector< Element >::difference_type j)"""
        return _cpp.ElementVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(ElementVector self, std::vector< Element >::difference_type i)
        __delitem__(ElementVector self, PySliceObject * slice)
        """
        return _cpp.ElementVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(ElementVector self, PySliceObject * slice) -> ElementVector
        __getitem__(ElementVector self, std::vector< Element >::difference_type i) -> Element
        """
        return _cpp.ElementVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(ElementVector self, PySliceObject * slice, ElementVector v)
        __setitem__(ElementVector self, PySliceObject * slice)
        __setitem__(ElementVector self, std::vector< Element >::difference_type i, Element x)
        """
        return _cpp.ElementVector___setitem__(self, *args)

    def append(self, *args):
        """append(ElementVector self, Element x)"""
        return _cpp.ElementVector_append(self, *args)

    def size(self):
        """size(ElementVector self) -> std::vector< Element >::size_type"""
        return _cpp.ElementVector_size(self)

    def clear(self):
        """clear(ElementVector self)"""
        return _cpp.ElementVector_clear(self)

    def __init__(self, *args): 
        """
        __init__(std::vector<(Element)> self) -> ElementVector
        __init__(std::vector<(Element)> self, ElementVector arg2) -> ElementVector
        __init__(std::vector<(Element)> self, std::vector< Element >::size_type size) -> ElementVector
        __init__(std::vector<(Element)> self, std::vector< Element >::size_type size, Element value) -> ElementVector
        """
        _cpp.ElementVector_swiginit(self,_cpp.new_ElementVector(*args))
    def back(self):
        """back(ElementVector self) -> Element"""
        return _cpp.ElementVector_back(self)

    def resize(self, *args):
        """
        resize(ElementVector self, std::vector< Element >::size_type new_size)
        resize(ElementVector self, std::vector< Element >::size_type new_size, Element x)
        """
        return _cpp.ElementVector_resize(self, *args)

    def reserve(self, *args):
        """reserve(ElementVector self, std::vector< Element >::size_type n)"""
        return _cpp.ElementVector_reserve(self, *args)

    __swig_destroy__ = _cpp.delete_ElementVector
ElementVector.__nonzero__ = new_instancemethod(_cpp.ElementVector___nonzero__,None,ElementVector)
ElementVector.__bool__ = new_instancemethod(_cpp.ElementVector___bool__,None,ElementVector)
ElementVector.__len__ = new_instancemethod(_cpp.ElementVector___len__,None,ElementVector)
ElementVector.__getslice__ = new_instancemethod(_cpp.ElementVector___getslice__,None,ElementVector)
ElementVector.__setslice__ = new_instancemethod(_cpp.ElementVector___setslice__,None,ElementVector)
ElementVector.__delslice__ = new_instancemethod(_cpp.ElementVector___delslice__,None,ElementVector)
ElementVector.__delitem__ = new_instancemethod(_cpp.ElementVector___delitem__,None,ElementVector)
ElementVector.__getitem__ = new_instancemethod(_cpp.ElementVector___getitem__,None,ElementVector)
ElementVector.__setitem__ = new_instancemethod(_cpp.ElementVector___setitem__,None,ElementVector)
ElementVector.append = new_instancemethod(_cpp.ElementVector_append,None,ElementVector)
ElementVector.size = new_instancemethod(_cpp.ElementVector_size,None,ElementVector)
ElementVector.clear = new_instancemethod(_cpp.ElementVector_clear,None,ElementVector)
ElementVector.back = new_instancemethod(_cpp.ElementVector_back,None,ElementVector)
ElementVector.resize = new_instancemethod(_cpp.ElementVector_resize,None,ElementVector)
ElementVector.reserve = new_instancemethod(_cpp.ElementVector_reserve,None,ElementVector)
ElementVector_swigregister = _cpp.ElementVector_swigregister
ElementVector_swigregister(ElementVector)

def readElemFile(filename):
    """
    Read a carp element file
    """
    elem_vector = ElementVector()
    _readElemFile(filename, elem_vector)
    return elem_vector



